// Everything of prime Numbers at one place...... 
// Try to understand all.......

#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const long m=pow(10,9)+7;
const long n=1000001;
long a[n+1],b[n+1],c[n+1];   ll sum[n]={0};
int nearestPrime[n];
void fillup2()
{
    for(int i=0;i<n;i++)
       {a[i]=1; b[i]=2; c[i]=0;}
}
void fillup()
{
    a[0]=0; a[1]=0;
    for(int i=2;i*i<=n;i++)
    {
        if(a[i]==1)
        for(int j=2;i*j<n;j++)
          a[i*j]=0;
    }
}
void NoOfFactors()
 {
     for(int i=1;i<=n;i++)
    {
        for(int j=1;i*j<=n;j++)
        {
            c[i*j]++;
        }
    }
 }
void NumberOfPrimeDivisors()
{
    b[0]=0; b[1]=1;  
    for(int i=2;i*i<=n;i++)
    {
        if(a[i]==1)
        for(int j=2;i*j<n;j++)
          b[i*j]+=1;
    }
}
void SumOfprimes()
{
   for(int i=2;i<n;i++)
    {
     if(a[i]==1) sum[i]=(sum[i-1]+i);
     else sum[i]=sum[i-1];
    }
}
void NearestPrime()
{
    int l=2,h=5,temp=2; nearestPrime[0]=2; nearestPrime[1]=2;
     while(temp<n)
    {
       if(temp==h){
           l=h; 
           nearestPrime[temp]=h; h++;
           while(a[h]==0&&h<n) h++; 
           temp++;
       }
       else{
           if(temp-l<=h-temp) nearestPrime[temp]=l;
           else nearestPrime[temp]=h;
           temp++;
       }
    }
}
int main()
{

    int tc;
    cin>>tc;
    fillup2();
    fillup(); 
    NearestPrime();
    SumOfprimes();
    NumberOfPrimeDivisors();
    while(tc--)
    {
       // You have everything that U need......
       // Perform any Task here.........

        // int l,r;
        // scanf("%d%d",&l,&r);
        // ll ans=sum[r]-sum[l-1];
        // printf("%lld\n",ans);
    }
}